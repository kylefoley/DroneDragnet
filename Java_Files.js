/** * Created by kyle and matt on 6/17/16. */////////////////////////////////////////////////////Initial Powerup////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Check Coordinates/////////////////////////////////////////////////////var coordinate={};$("#GPS").click(function() {//Checks to see if GPS button is selected    console.log("GPS");        coordinate="GPS"});$("#ECEF").click(function() {//Checks to see if ECEF button is selected    console.log("ECEF");        coordinate="ECEF"});$("#Azimuth").click(function() {//Checks to see if Azimuth button is selected    console.log("Azimuth");        coordinate = "Azimuth"});/////////////////////////////////////////////////////Get Namespace///////////////////////////////////////////////////////////////////var namespace="flytpod"//declaring namespace (namespace is flytsim if using flytsimvar msgdata={};var ip="flytpod:9090";//declaring IP (ip is localhost:9090 if using flytsim)$.ajax({//code not necessary, namespace is/will always be known    type: "POST",    dataType: "json",    data: JSON.stringify(msgdata),    url: "http://"+ip+"/ros/get_global_namespace",    success: function (data){           namespace = data.param_info.param_value;//If success, writes  actual namespace to namespace           console.log("Namespace go",data,namespace)    },    error: function(data) {        console.log("Namespace no-go",data)    }});/////////////////////////////////////////////////////////Initilize websocket/////////////////////////////////////////////////////var  ros= new ROSLIB.Ros({    url : "ws://"+ip+"/websocket"});ros.on('connection', function() {                              //returns to console if connected    console.log('Connected to websocket server.');});ros.on('error', function() {    console.log('Error connecting to websocket server.');    //returns to console if connection fails});ros.on('close', function() {    console.log('Connection to websocket server closed.');   //returns to console when connection closes});//////////////////////////////////////////////////////////////Battery Level//////////////////////////////////////////////////////var listenerBatteryStatus = new ROSLIB.Topic({   //creates new ROS for voltage    ros :ros,    name : '/'+namespace+'/mavros/battery',    messageType : 'mavros_msgs/BatteryStatus',    throttle_rate: 200});listenerBatteryStatus.subscribe(function(message) { //subscribes to battery voltage    $("#voltage").html((message.voltage).toFixed(2));    $("#current").html(message.current.toFixed(2));    $("#remaining").html(message.remaining.toFixed(2));});///////////////////////////////////////////////////////////HUD//////////////////////////////////////////////////////////var listenerHUD = new ROSLIB.Topic({ //Initilizes HUD numbers    ros :ros,    name : '/'+namespace+'/mavros/vfr_hud',    messageType : 'mavros_msgs/VFR_HUD',    throttle_rate: 200});listenerHUD.subscribe(function(message) {    $('#aspeed').text(message.airspeed.toFixed(2));    $('#gspeed').text(message.groundspeed.toFixed(2));    $('#head').text(message.heading.toFixed(2));    $('#hthrottle').text(message.throttle.toFixed(2));    $('#halt').text(message.altitude.toFixed(2));    $('#hclimb').text(message.climb.toFixed(2));});////////////////////////////////////////////////////Vehicle State////////////////////////////////////////////////var listenerState = new ROSLIB.Topic({    ros :ros,    name : '/'+namespace+'/flyt/state',    messageType : 'mavros_msgs/State',    throttle_rate: 200});listenerState.subscribe(function(message) {    $("#vehicle-mode-text").html(message.mode);});///////////////////////////////////////////////# GPS///////////////////////////////////////////////var listenerGlobalPositionRaw = new ROSLIB.Topic({    ros :ros,    name : '/'+namespace+'/mavros/global_position/raw/fix',    messageType : 'sensor_msgs/NavSatFix',    throttle_rate: 1000});listenerGlobalPositionRaw.subscribe(function(message) {    $("#satellites").html(message.status.status);});///////////////////////////////////////////////RC Strength///////////////////////////////////////////////var listenerRCIN = new ROSLIB.Topic({    ros :ros,    name : '/'+namespace+'/mavros/rc/in',    messageType : 'mavros_msgs/RCIn',    throttle_rate: 200});listenerRCIN.subscribe(function(message) {    $("#rc").text(message.rssi);});///////////////////////////////////////////////////////////Custom command input//////////////////////////////////////////////*var msgdata={};   //useless code, was considering make a custom command box. HTML is still valid for this codevar "#custom"="";$.ajax({    type: "POST",    dataType: "json",    data: JSON.stringify(msgdata),    url: "http://"+ip+"/ros/"+namespace+"/navigation/"+custom+"",    success: function(data){        console.log("Custom command go",data);    },    error: function (data) {        console.log("Custom command no-go",data)    }});*////////////////////////////////////////////////////////////Drone Detected///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Take Off/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Make Decision//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Initiate Capture Button/////////////////////////////////////////////////////////////var x_in={};//ECEF input longitudevar y_in={};//ECEF input latitudevar z_in={};//ECEF input altitudevar lat_in={};//GPS input latitudevar long_in={};//GPS input longitudevar alt_in={};//GPS input altitudevar azimuth_in={};//Azimuth inputvar range_in={};//Range inputvar angle_in={};//Angle inputvar lat_out={};//latitude sent to dronevar long_out={};//longitude sent to dronevar alt_out={};//altitude sent to drone, it should be negativevar local_long={};//radar longitudevar local_lat={};//radar latitude$("#Initiate_Capture").click(function() {    /*var msgdata={};  //When html page is opened, drone takes off instantly. 5 or so second delay. Check level sensors    msgdata["takeoff_alt"]=7.00; //takeoff altitude in meters    $.ajax({        type: "POST",        dataType: "json",        data: JSON.stringify(msgdata),        url: "http://"+ip+"/ros/"+namespace+"/navigation/take_off",        success: function(data){            console.log("Takeoff go",data);//  returns to console if takeoff is a go        },        error: function (data) {            console.log("Takeoff no-go",data);//  returns to console if takeoff is a no-go        }    });*/    //FYI, Long=y, Lat=x    setTimeout(function () {long_in=-76.11526908019636;lat_in=43.04284688135717;alt_in=10; coordType(long_in, lat_in, alt_in)}, 1000);    setTimeout(function () {long_in=-76.11499353520725;lat_in=43.04284883489306;alt_in=10; coordType(long_in, lat_in, alt_in)}, 2000);    setTimeout(function () {long_in=-76.11482218093352;lat_in=43.04285990622328;alt_in=7; coordType(long_in, lat_in, alt_in)}, 3000);    setTimeout(function () {long_in=-76.11466568573859;lat_in=43.04292269894801;alt_in=10; coordType(long_in, lat_in, alt_in)}, 4000);    setTimeout(function () {long_in=-76.11463873577726;lat_in=43.04303078691284;alt_in=12; coordType(long_in, lat_in, alt_in)}, 5000);    setTimeout(function () {long_in=-76.11465593030675;lat_in=43.04315724013170;alt_in=10; coordType(long_in, lat_in, alt_in)}, 6000);    setTimeout(function () {long_in=-76.11476813256387;lat_in=43.04325485505669;alt_in=10; coordType(long_in, lat_in, alt_in)}, 7000);    setTimeout(function () {long_in=-76.11494488117638;lat_in=43.04322898529588;alt_in=13; coordType(long_in, lat_in, alt_in)}, 8000);    setTimeout(function () {long_in=-76.11513835774242;lat_in=43.04319164385308;alt_in=10; coordType(long_in, lat_in, alt_in)}, 9000);    setTimeout(function () {long_in=-76.11525779351057;lat_in=43.04308993453137;alt_in=13; coordType(long_in, lat_in, alt_in)}, 10000);    setTimeout(function () {long_in=-76.11524303295596;lat_in=43.04295600610126;alt_in=10; coordType(long_in, lat_in, alt_in)}, 11000);    setTimeout(function () {long_in=-76.11510916421503;lat_in=43.04292414873611;alt_in=10; coordType(long_in, lat_in, alt_in)}, 12000);    setTimeout(function () {long_in=-76.11486505462024;lat_in=43.04294614351095;alt_in=10; coordType(long_in, lat_in, alt_in)}, 13000);    setTimeout(function () {long_in=-76.11475552624846;lat_in=43.04304146790965;alt_in=10; coordType(long_in, lat_in, alt_in)}, 14000);    setTimeout(function () {long_in=-76.11480273838265;lat_in=43.04315725064523;alt_in=10; coordType(long_in, lat_in, alt_in)}, 15000);    setTimeout(function () {long_in=-76.11496332534044;lat_in=43.04316797733929;alt_in=10; coordType(long_in, lat_in, alt_in)}, 16000);    setTimeout(function () {long_in=-76.11513141687421;lat_in=43.04309635399241;alt_in=10; coordType(long_in, lat_in, alt_in)}, 17000);    setTimeout(function () {long_in=-76.11516851863433;lat_in=43.04298405969451;alt_in=10; coordType(long_in, lat_in, alt_in)}, 18000);    setTimeout(function () {long_in=-76.11530625957521;lat_in=43.04280483404592;alt_in=19; coordType(long_in, lat_in, alt_in)}, 19000);////////////////////////////////////////Sending coordinates to drone//////////////////////////////////////    function sendCoord(long_out, lat_out, alt_out){ //this function sends the coordinates to the drone        var msgdata = {};        msgdata["twist"] = {};        msgdata.twist["twist"] = {};        msgdata.twist.twist["linear"] = {};        msgdata.twist.twist.linear["x"] = lat_out;        msgdata.twist.twist.linear["y"] = long_out;        msgdata.twist.twist.linear["z"] = alt_out;        msgdata.twist.twist["angular"] = {};        msgdata["tolerance"] = 2.00;//accepted tolerance from point in m (set to 2)        msgdata["async"] = true;//async mode is set (set to true)        msgdata["yaw_valid"] = false;//if yaw setpoint is used, must be set to true (set to false)        $.ajax({            type: "POST",            dataType: "json",            data: JSON.stringify(msgdata),            url: "http://" + ip + "/ros/" + namespace + "/navigation/position_set_global",            success: function (data) {                console.log("Coordinates sent", lat_out, long_out, alt_out);            }        });    }    ////////////////////////////////////////Input selection and conversion//////////////////////////////////////    function coordType(long_in, lat_in, alt_in) { //selecting input and converting, if necessary        if (coordinate == "GPS") {  //GPS input to GPS output            console.log("GPS go");            lat_out = lat_in;            long_out = long_in;            alt_out = alt_in;            sendCoord(long_out, lat_out, alt_out)        }        else if (coordinate=="ECEF") {  //ECEF input to GPS output            console.log("ECEF go");            // WGS84 ellipsoid constants            // This is in kilometers            var a = 6378137; // radius            var e = 8.1819190842622e-2;  // eccentricity            var asq = Math.pow(a,2);            var esq = Math.pow(e,2);            var b = Math.sqrt( asq * (1-esq) );            var bsq = Math.pow(b,2);            var ep = Math.sqrt( (asq - bsq)/bsq);            var p = Math.sqrt( Math.pow(x_in,2) + Math.pow(y_in,2) );            var th = Math.atan2(a*z_in, b*p);            var lon = Math.atan2(y_in,x_in);            var lat = Math.atan2( (z_in + Math.pow(ep,2)*b*Math.pow(Math.sin(th),3) ), (p - esq*a*Math.pow(Math.cos(th),3)) );            var N = a/( Math.sqrt(1-esq*Math.pow(Math.sin(lat),2)) );            var alt = p / Math.cos(lat) - N;            lon = lon % (2*Math.PI);            lon = lon * 180 / Math.PI;            lat = lat * 180 / Math.PI;            lat_out = lat;            long_out = lon;            alt_out = alt;            console.log(lat_out, long_out, alt_out);        }        /*else if (coordinate=="Azimuth")    //Azimuth input to GPS output, not working, disabled        {            console.log("Azimuth go");            var h = Math.sin(angle_in/range_in); //height in meters            var base = Math.cos(angle_in/range_in); //base in meters            var f = 1/298.25722210;            var u= Math.atan((1-f)*(Math.tan(local_long)));            var a=6378137.0;            var b=6356752.31424;            var sigma1 = Math.atan(Math.tan(u)/Math.cos(azimuth_in));            var sin_alpha=Math.cos(u)*Math.sin(azimuth_in);            var cos2_alpha= 1-Math.pow(sin_alpha,2);            var u2= cos2_alpha*((Math.pow(a,2)-Math.pow(b,2))/Math.pow(b,2));            var A=1+(u2/16384)*(4096+u2*(-768+u2*(320-175*u2)));            var B=(u2/1024)*(256+u2*(-128+u2*(74-47*u2)));            var sigma=base/(b*A);            var sigmam=2*sigma1+sigma;            var dsigma=B*Math.sin(sigma)*(Math.cos(sigmam)+.25*B*(Math.cos(sigma)*(-1+2*Math.pow(Math.cos(sigmam),2)))-1/6*B*Math.cos(sigmam)*(-3+4*Math.pow(Math.cos(sigma),2))*(-3+4*Math.pow(Math.cos(sigmam),2)));            var sigma=sigma+dsigma;            var long_out =Math.atan((Math.sin(u)*Math.cos(sigma)+Math.cos(u)*Math.sin(sigma)*Math.cos(azimuth_in))/ ((1-f)*Math.sqrt(Math.pow(sin_alpha,2)+Math.pow(Math.sin(u)*Math.sin(sigma)-Math.cos(u)*Math.cos(sigma)*Math.cos(azimuth_in),2))));            var lambda=Math.atan((Math.sin(sigma)*Math.sin(sigma1))/(Math.cos(u)*Math.sin(sigma)-Math.sin(u)*Math.sin(sigma)*Math.cos(azimuth_in)));            var C=f/16*cos2_alpha*(4+f*(4-3*cos2_alpha));            var L=lambda-(1-C)*f*sin_alpha*(sigma+C*Math.sin(sigma)*(Math.cos(sigmam)+C*Math.cos(sigma*(-1+2*Math.pow(Math.cos(sigmam))))));            var lat_out=L+local_lat;            console.log(L);        };*/    }    });//////////////////////////////////////////////////////////Disengage Button//////////////////////////////////////////////////////////////$("#Disengage").click(function() {  //lands drone at current location, will not work if coordinates are being sent    var  msgdata={};    $.ajax({        type: "POST",        dataType: "json",        data: JSON.stringify(msgdata),        url: "http://"+ip+"/ros/"+namespace+"/navigation/land",        success: function (data) {            console.log("Land go",data)        },        error: function (data) {            console.log("Land no-go",data)        }    });});////////////////////////////////////////////////////////////Debug Buttons////////////////////////////////////////////////////$("#testbox").click(function(){  //Currently set to make box test pattern setTimeout(function () { var msgdata = {}; msgdata["twist"] = {}; msgdata.twist["twist"] = {}; msgdata.twist.twist["linear"] = {}; msgdata.twist.twist.linear["x"] = 10; msgdata.twist.twist.linear["y"] = 10; msgdata.twist.twist.linear["z"] = -10; msgdata.twist.twist["angular"] = {}; msgdata["tolerance"] = 2.00; msgdata["async"] = true; msgdata["relative"] = false; msgdata["yaw_valid"] = false; msgdata["body_frame"] = false; $.ajax({ type: "POST", dataType: "json", data: JSON.stringify(msgdata), url: "http://" + ip + "/ros/" + namespace + "/navigation/position_set", success: function (data) { console.log(data); } }) }, 5000); setTimeout(function () { var msgdata = {}; msgdata["twist"] = {}; msgdata.twist["twist"] = {}; msgdata.twist.twist["linear"] = {}; msgdata.twist.twist.linear["x"] = 10; msgdata.twist.twist.linear["y"] = 0; msgdata.twist.twist.linear["z"] = -10; msgdata.twist.twist["angular"] = {}; msgdata["tolerance"] = 2.00; msgdata["async"] = true; msgdata["relative"] = false; msgdata["yaw_valid"] = false; msgdata["body_frame"] = false; $.ajax({ type: "POST", dataType: "json", data: JSON.stringify(msgdata), url: "http://" + ip + "/ros/" + namespace + "/navigation/position_set", success: function (data) { console.log(data); } }) }, 10000); setTimeout(function () { var msgdata = {}; msgdata["twist"] = {}; msgdata.twist["twist"] = {}; msgdata.twist.twist["linear"] = {}; msgdata.twist.twist.linear["x"] = 0; msgdata.twist.twist.linear["y"] = 10; msgdata.twist.twist.linear["z"] = -10; msgdata.twist.twist["angular"] = {}; msgdata["tolerance"] = 2.00; msgdata["async"] = true; msgdata["relative"] = false; msgdata["yaw_valid"] = false; msgdata["body_frame"] = false; $.ajax({ type: "POST", dataType: "json", data: JSON.stringify(msgdata), url: "http://" + ip + "/ros/" + namespace + "/navigation/position_set", success: function (data) { console.log(data); } }) }, 15000); setTimeout(function () { var msgdata = {}; msgdata["twist"] = {}; msgdata.twist["twist"] = {}; msgdata.twist.twist["linear"] = {}; msgdata.twist.twist.linear["x"] = 0; msgdata.twist.twist.linear["y"] = 0; msgdata.twist.twist.linear["z"] = -15; msgdata.twist.twist["angular"] = {}; msgdata["tolerance"] = 2.00; msgdata["async"] = true; msgdata["relative"] = false; msgdata["yaw_valid"] = false; msgdata["body_frame"] = false; $.ajax({ type: "POST", dataType: "json", data: JSON.stringify(msgdata), url: "http://" + ip + "/ros/" + namespace + "/navigation/position_set", success: function (data) { console.log(data); } }) }, 20000); setTimeout(function () { var msgdata = {}; msgdata["twist"] = {}; msgdata.twist["twist"] = {}; msgdata.twist.twist["linear"] = {}; msgdata.twist.twist.linear["x"] = 10; msgdata.twist.twist.linear["y"] = 10; msgdata.twist.twist.linear["z"] = -15; msgdata.twist.twist["angular"] = {}; msgdata["tolerance"] = 2.00; msgdata["async"] = true; msgdata["relative"] = false; msgdata["yaw_valid"] = false; msgdata["body_frame"] = false; $.ajax({ type: "POST", dataType: "json", data: JSON.stringify(msgdata), url: "http://" + ip + "/ros/" + namespace + "/navigation/position_set", success: function (data) { console.log(data); } }) }, 25000);    });$("#wp1").click(function(){ //currently set to test coordinate start position        var  msgdata={};    msgdata["twist"]={};    msgdata.twist["twist"]={};    msgdata.twist.twist["linear"]={};    msgdata.twist.twist.linear["x"]=43.04284688135717;    msgdata.twist.twist.linear["y"]=-76.11526908019636;    msgdata.twist.twist.linear["z"]=10.00;    msgdata.twist.twist["angular"]={};    msgdata["tolerance"]=2.00;    msgdata["async"]=true;    msgdata["yaw_valid"]=false;    $.ajax({        type: "POST",        dataType: "json",        data: JSON.stringify(msgdata),        url: "http://"+ip+"/ros/"+namespace+"/navigation/position_set_global",        success: function(data){            console.log("Waypoint 1 go", data);        },        error: function(data){            console.log("Waypoint 1 no-go", data)        }    });});$("#wp2").click(function(){    var  msgdata={};    msgdata["twist"]={};    msgdata.twist["twist"]={};    msgdata.twist.twist["linear"]={};    msgdata.twist.twist.linear["x"]=-43.0430250;    msgdata.twist.twist.linear["y"]=-76.1149694;    msgdata.twist.twist.linear["z"]=10.00;    msgdata.twist.twist["angular"]={};    msgdata["tolerance"]=2.00;    msgdata["async"]=true;    msgdata["yaw_valid"]=false;    $.ajax({        type: "POST",        dataType: "json",        data: JSON.stringify(msgdata),        url: "http://"+ip+"/ros/"+namespace+"/navigation/position_set_global",        success: function(data){            console.log("Waypoint 2 go", data);        },        error: function(data){            console.log("Waypoint 2 no-go", data)        }    });});$("#future").click(function(){ //future use button});$("#RTH").click(function(){  //currently set as RTH button    var  msgdata={};    msgdata["twist"]={};    msgdata.twist["twist"]={};    msgdata.twist.twist["linear"]={};    msgdata.twist.twist.linear["x"]=0.00;    msgdata.twist.twist.linear["y"]=0.00;    msgdata.twist.twist.linear["z"]=-5.00;    msgdata.twist.twist["angular"]={};    msgdata.twist.twist.angular["z"]=1.00;    msgdata["tolerance"]=2.00;    msgdata["async"]=true;    msgdata["relative"]=false;    msgdata["yaw_valid"]=true;    msgdata["body_frame"]=false;    $.ajax({        type: "POST",        dataType: "json",        data: JSON.stringify(msgdata),        url: "http://"+ip+"/ros/"+namespace+"/navigation/position_set",        success: function(data){            console.log("RTH go", data);        },        error: function(data){            console.log("RTH no-go", data)        }    });});$("#takeoff").click(function(){ //currently set as takeoff buttonvar msgdata={};msgdata["takeoff_alt"]=7.00; //takeoff altitude in meters$.ajax({    type: "POST",    dataType: "json",    data: JSON.stringify(msgdata),    url: "http://"+ip+"/ros/"+namespace+"/navigation/take_off",    success: function(data){        console.log("Takeoff go",data);//  returns to console if takeoff is a go    },    error: function (data) {        console.log("Takeoff no-go",data);//  returns to console if takeoff is a no-go    }});});